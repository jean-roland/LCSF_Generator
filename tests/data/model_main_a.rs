//! Main file (A) for protocol: Test
//!
//! This file has been auto-generated by LCSF Generator v1.3
//! Feel free to customize as needed

use crate::lcsf_lib::lcsf_core;
use crate::lcsf_lib::lcsf_validator;
use crate::lcsf_prot::lcsf_protocol_test;
use lcsf_core::LcsfCore;
use lcsf_validator::LcsfValidCmd;
use std::ffi::CString;

/// Command enum
#[derive(Debug, PartialEq, Copy, Clone)]
pub enum CmdEnum {
    SC1,
    SC2,
    SC3,
    CC1,
    CC2,
    CC3,
    CC4,
    CC5,
    CC6,
}

/// Command payload union
#[derive(Debug, PartialEq)]
pub enum CmdPayload {
    Empty,
    Cc1Payload(Cc1AttPayload),
    Cc2Payload(Cc2AttPayload),
    Cc3Payload(Cc3AttPayload),
    Cc4Payload(Cc4AttPayload),
    Cc5Payload(Cc5AttPayload),
    Cc6Payload(Cc6AttPayload),
}

// Command data structures
#[derive(Debug, PartialEq)]
pub struct Cc1AttPayload {
    pub sa1: u8,
    pub sa2: u16,
    pub sa3: u32,
    pub sa4: Vec<u8>,
    pub sa5: CString,
    pub is_sa6_here: bool,
    pub sa6: u8,
    pub is_sa7_here: bool,
    pub sa7: u16,
    pub is_sa8_here: bool,
    pub sa8: u32,
    pub is_sa9_here: bool,
    pub sa9: Vec<u8>,
    pub is_sa10_here: bool,
    pub sa10: CString,
}

#[derive(Debug, PartialEq)]
pub struct Cc2AttPayload {
    pub sa1: u8,
    pub sa2: u16,
    pub sa3: u32,
    pub sa4: Vec<u8>,
    pub sa5: CString,
    pub is_sa6_here: bool,
    pub sa6: u8,
    pub is_sa7_here: bool,
    pub sa7: u16,
    pub is_sa8_here: bool,
    pub sa8: u32,
    pub is_sa9_here: bool,
    pub sa9: Vec<u8>,
    pub is_sa10_here: bool,
    pub sa10: CString,
}

#[derive(Debug, PartialEq)]
pub struct Cc3AttPayload {
    pub sa1: u8,
    pub sa2: u16,
    pub sa3: u32,
    pub sa4: Vec<u8>,
    pub sa5: CString,
    pub is_sa6_here: bool,
    pub sa6: u8,
    pub is_sa7_here: bool,
    pub sa7: u16,
    pub is_sa8_here: bool,
    pub sa8: u32,
    pub is_sa9_here: bool,
    pub sa9: Vec<u8>,
    pub is_sa10_here: bool,
    pub sa10: CString,
}

#[derive(Debug, PartialEq)]
pub struct Cc4AttPayload {
    pub sa1: u8,
    pub ca1_payload: Cc4AttCa1Payload,
    pub is_ca2_here: bool,
    pub ca2_payload: Cc4AttCa2Payload,
}

#[derive(Debug, PartialEq)]
pub struct Cc5AttPayload {
    pub sa2: u16,
    pub ca5_payload: Cc5AttCa5Payload,
    pub is_ca6_here: bool,
    pub ca6_payload: Cc5AttCa6Payload,
}

#[derive(Debug, PartialEq)]
pub struct Cc6AttPayload {
    pub sa4: Vec<u8>,
    pub ca9_payload: Cc6AttCa9Payload,
    pub is_ca10_here: bool,
    pub ca10_payload: Cc6AttCa10Payload,
}

// Attribute with sub-attributes structures
#[derive(Debug, PartialEq)]
pub struct Cc4AttCa1Payload {
    pub sa1: u8,
    pub sa2: u16,
    pub is_sa3_here: bool,
    pub sa3: u32,
}

#[derive(Debug, PartialEq)]
pub struct Cc4AttCa2Payload {
    pub is_sa1_here: bool,
    pub sa1: u8,
    pub ca3_payload: Ca2AttCa3Payload,
}

#[derive(Debug, PartialEq)]
pub struct Ca2AttCa3Payload {
    pub is_sa1_here: bool,
    pub sa1: u8,
    pub ca4_payload: Ca3AttCa4Payload,
}

#[derive(Debug, PartialEq)]
pub struct Ca3AttCa4Payload {
    pub sa4: Vec<u8>,
}

#[derive(Debug, PartialEq)]
pub struct Cc5AttCa5Payload {
    pub sa1: u8,
    pub sa2: u16,
    pub is_sa3_here: bool,
    pub sa3: u32,
}

#[derive(Debug, PartialEq)]
pub struct Cc5AttCa6Payload {
    pub is_sa1_here: bool,
    pub sa1: u8,
    pub ca7_payload: Ca6AttCa7Payload,
}

#[derive(Debug, PartialEq)]
pub struct Ca6AttCa7Payload {
    pub is_sa1_here: bool,
    pub sa1: u8,
    pub ca8_payload: Ca7AttCa8Payload,
}

#[derive(Debug, PartialEq)]
pub struct Ca7AttCa8Payload {
    pub sa4: Vec<u8>,
}

#[derive(Debug, PartialEq)]
pub struct Cc6AttCa9Payload {
    pub sa1: u8,
    pub sa2: u16,
    pub is_sa3_here: bool,
    pub sa3: u32,
}

#[derive(Debug, PartialEq)]
pub struct Cc6AttCa10Payload {
    pub is_sa1_here: bool,
    pub sa1: u8,
    pub ca11_payload: Ca10AttCa11Payload,
}

#[derive(Debug, PartialEq)]
pub struct Ca10AttCa11Payload {
    pub is_sa1_here: bool,
    pub sa1: u8,
    pub ca12_payload: Ca11AttCa12Payload,
}

#[derive(Debug, PartialEq)]
pub struct Ca11AttCa12Payload {
    pub sa4: Vec<u8>,
}

fn execute_sc2() {
    // Function to implement
    todo!();
}

fn execute_sc3() {
    // Function to implement
    todo!();
}

fn execute_cc2(payload: &Cc2AttPayload) {
    // Retrieve attributes
    let sa1 = payload.sa1;
    let sa2 = payload.sa2;
    let sa3 = payload.sa3;
    let sa4 = &payload.sa4;
    let sa5 = &payload.sa5;
    let mut sa6 = 0;
    let mut sa7 = 0;
    let mut sa8 = 0;
    let mut sa9 = &Vec::new();
    let mut sa10 = &CString::new("").unwrap();
    if payload.is_sa6_here {
        sa6 = payload.sa6;
    }
    if payload.is_sa7_here {
        sa7 = payload.sa7;
    }
    if payload.is_sa8_here {
        sa8 = payload.sa8;
    }
    if payload.is_sa9_here {
        sa9 = &payload.sa9;
    }
    if payload.is_sa10_here {
        sa10 = &payload.sa10;
    }
    // Function to implement
    todo!();
}

fn execute_cc3(payload: &Cc3AttPayload) {
    // Retrieve attributes
    let sa1 = payload.sa1;
    let sa2 = payload.sa2;
    let sa3 = payload.sa3;
    let sa4 = &payload.sa4;
    let sa5 = &payload.sa5;
    let mut sa6 = 0;
    let mut sa7 = 0;
    let mut sa8 = 0;
    let mut sa9 = &Vec::new();
    let mut sa10 = &CString::new("").unwrap();
    if payload.is_sa6_here {
        sa6 = payload.sa6;
    }
    if payload.is_sa7_here {
        sa7 = payload.sa7;
    }
    if payload.is_sa8_here {
        sa8 = payload.sa8;
    }
    if payload.is_sa9_here {
        sa9 = &payload.sa9;
    }
    if payload.is_sa10_here {
        sa10 = &payload.sa10;
    }
    // Function to implement
    todo!();
}

fn execute_cc5(payload: &Cc5AttPayload) {
    // Retrieve attributes
    let sa2 = payload.sa2;
    let ca5_sa1 = payload.ca5_payload.sa1;
    let ca5_sa2 = payload.ca5_payload.sa2;
    let mut ca5_sa3 = 0;
    let mut ca6_sa1 = 0;
    let mut ca7_sa1 = 0;
    let mut ca8_sa4 = &Vec::new();
    if payload.ca5_payload.is_sa3_here {
        ca5_sa3 = payload.ca5_payload.sa3;
    }
    if payload.is_ca6_here {
        if payload.ca6_payload.is_sa1_here {
            ca6_sa1 = payload.ca6_payload.sa1;
        }
        if payload.ca6_payload.ca7_payload.is_sa1_here {
            ca7_sa1 = payload.ca6_payload.ca7_payload.sa1;
        }
        ca8_sa4 = &payload.ca6_payload.ca7_payload.ca8_payload.sa4;
    }
    // Function to implement
    todo!();
}

fn execute_cc6(payload: &Cc6AttPayload) {
    // Retrieve attributes
    let sa4 = &payload.sa4;
    let ca9_sa1 = payload.ca9_payload.sa1;
    let ca9_sa2 = payload.ca9_payload.sa2;
    let mut ca9_sa3 = 0;
    let mut ca10_sa1 = 0;
    let mut ca11_sa1 = 0;
    let mut ca12_sa4 = &Vec::new();
    if payload.ca9_payload.is_sa3_here {
        ca9_sa3 = payload.ca9_payload.sa3;
    }
    if payload.is_ca10_here {
        if payload.ca10_payload.is_sa1_here {
            ca10_sa1 = payload.ca10_payload.sa1;
        }
        if payload.ca10_payload.ca11_payload.is_sa1_here {
            ca11_sa1 = payload.ca10_payload.ca11_payload.sa1;
        }
        ca12_sa4 = &payload.ca10_payload.ca11_payload.ca12_payload.sa4;
    }
    // Function to implement
    todo!();
}

/// Execute a command, customize as needed
///
/// cmd_name: name of the command
///
/// cmd_payload: pointer to command payload
fn execute_cmd(cmd_name: CmdEnum, cmd_payload: &CmdPayload) {
    match cmd_name {
        CmdEnum::SC2 => execute_sc2(),
        CmdEnum::SC3 => execute_sc3(),
        CmdEnum::CC2 => {
            if let CmdPayload::Cc2Payload(payload) = cmd_payload {
                execute_cc2(payload);
            }
        }
        CmdEnum::CC3 => {
            if let CmdPayload::Cc3Payload(payload) = cmd_payload {
                execute_cc3(payload);
            }
        }
        CmdEnum::CC5 => {
            if let CmdPayload::Cc5Payload(payload) = cmd_payload {
                execute_cc5(payload);
            }
        }
        CmdEnum::CC6 => {
            if let CmdPayload::Cc6Payload(payload) = cmd_payload {
                execute_cc6(payload);
            }
        }
        _ => {
            // This case can be customized (e.g to send an error command)
            todo!();
        }
    }
}

/// Init a LcsfCore with the protocol
///
/// core: LcsfCore reference
pub fn init_core(core: &mut LcsfCore) {
    // Add protocol to LcsfCore
    core.add_protocol(
        lcsf_protocol_test::PROT_ID,
        &lcsf_protocol_test::PROT_DESC,
        process_cmd,
    );
}

/// Process command callback, customize as you need
///
/// valid_cmd: received valid command
fn process_cmd(core: &LcsfCore, valid_cmd: &LcsfValidCmd) {
    // Process received command
    let (cmd_name, cmd_payload) = lcsf_protocol_test::receive_cmd(valid_cmd);
    execute_cmd(cmd_name, &cmd_payload);
    // Here the function will send back received commands like an echo
    // Customize as needed
    let valid_cmd = lcsf_protocol_test::send_cmd(cmd_name, &cmd_payload);
    core.send_cmd(lcsf_protocol_test::PROT_ID, &valid_cmd);
    todo!();
}
